name: Test Chuck Norris API Challenge

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-challenge:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt
        
    - name: Start timer
      id: timer
      run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
      
    - name: Run minimal tests
      id: minimal-tests
      run: |
        echo "Running minimal required tests..."
        python run_tests.py --categories --joke --verbose
        if [ $? -eq 0 ]; then
          echo "minimal_passed=true" >> $GITHUB_OUTPUT
        else
          echo "minimal_passed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Calculate completion time
      id: completion-time
      run: |
        end_time=$(date +%s)
        start_time=${{ steps.timer.outputs.start_time }}
        duration=$((end_time - start_time))
        echo "completion_time_seconds=$duration" >> $GITHUB_OUTPUT
        echo "completion_time_minutes=$((duration / 60))" >> $GITHUB_OUTPUT
        
    - name: Run full test suite
      id: full-tests
      run: |
        echo "Running full test suite..."
        python run_tests.py --coverage --verbose
        if [ $? -eq 0 ]; then
          echo "full_passed=true" >> $GITHUB_OUTPUT
        else
          echo "full_passed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate test report
      run: |
        echo "## Challenge Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Minimal Requirements Test" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.minimal-tests.outputs.minimal_passed }}" == "true" ]; then
          echo "‚úÖ **PASSED** - Basic endpoints working" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **FAILED** - Basic endpoints not working" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Completion Time" >> $GITHUB_STEP_SUMMARY
        echo "‚è±Ô∏è **${{ steps.completion-time.outputs.completion_time_seconds }} seconds** (${{ steps.completion-time.outputs.completion_time_minutes }} minutes)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Full Test Suite" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.full-tests.outputs.full_passed }}" == "true" ]; then
          echo "‚úÖ **PASSED** - All tests including bonus features" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **PARTIAL** - Some bonus features may be missing" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          .pytest_cache/
          htmlcov/
          .coverage
          
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Challenge Test Results')
          );
          
          const commentBody = `## üéØ Challenge Test Results
          
          ### Minimal Requirements Test
          ${process.env.MINIMAL_PASSED === 'true' ? '‚úÖ **PASSED**' : '‚ùå **FAILED**'} - Basic endpoints working
          
          ### Completion Time
          ‚è±Ô∏è **${process.env.COMPLETION_TIME_SECONDS} seconds** (${process.env.COMPLETION_TIME_MINUTES} minutes)
          
          ### Full Test Suite
          ${process.env.FULL_PASSED === 'true' ? '‚úÖ **PASSED**' : '‚ö†Ô∏è **PARTIAL**'} - All tests including bonus features
          
          ### Evaluation
          - **Functional Correctness**: ${process.env.MINIMAL_PASSED === 'true' ? '‚úÖ' : '‚ùå'}
          - **Code Quality**: ${process.env.FULL_PASSED === 'true' ? '‚úÖ' : '‚ö†Ô∏è'}
          - **Speed**: ${process.env.COMPLETION_TIME_SECONDS < 1200 ? '‚úÖ Fast (< 20 min)' : '‚ö†Ô∏è Slow (> 20 min)'}
          
          ---
          *Automated test results generated by GitHub Actions*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          }
      env:
        MINIMAL_PASSED: ${{ steps.minimal-tests.outputs.minimal_passed }}
        FULL_PASSED: ${{ steps.full-tests.outputs.full_passed }}
        COMPLETION_TIME_SECONDS: ${{ steps.completion-time.outputs.completion_time_seconds }}
        COMPLETION_TIME_MINUTES: ${{ steps.completion-time.outputs.completion_time_minutes }} 